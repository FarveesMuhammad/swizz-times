<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Swizz Times - Add Brands</title>
    <link rel="stylesheet" href="/css/admin/adminCategory.css">
    <link rel="stylesheet" href="/css/admin/adminAddCategory.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>
</head>
<body>
    <div class="container">
        <%- include('../partials/admin/admin_sidebar') %>
        <div class="main-content">
            <div class="header">
                <h1>Add New Brand</h1>
                <button class="logout-button" onclick="window.location.href='/admin/logout'">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                        <path d="M9 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h4"></path>
                        <polyline points="16 17 21 12 16 7"></polyline>
                        <line x1="21" y1="12" x2="9" y2="12"></line>
                    </svg>
                    <span>Logout</span>
                </button>
            </div>
            
            <div class="form-container">
                <form  enctype="multipart/form-data" acti>
                    <div class="form-group">
                        <label for="brandName">Brand Name*</label>
                        <input type="text" id="brandName" name="brandname"  placeholder="Enter brand name">
                    </div>
                    <div class="form-group">
                        <div class="image-field-container">
                            <h4>Add brand image</h4>
                            <div class="image-upload-area">
                                <input type="file" id="brandImage" name="brandImage" accept="image/*" class="brand-image-input">
                                <label for="brandImage" class="upload-label">Select Image</label>
                                <div class="image-preview-area" id="previewArea1">
                                    <p class="no-image-text">No image selected</p>
                                </div>
                            </div>
                            <div class="image-controls">
                                <button type="button" class="crop-button" id="cropButton1" disabled>Crop Image</button>
                                <button type="button" class="remove-button" id="removeButton1" disabled>Remove</button>
                            </div>
                        </div>
                        
                    </div>

                    <div id="cropModal" class="crop-modal">
                        <div class="crop-modal-content">
                            <div class="crop-modal-header">
                                <h3>Crop Image</h3>
                                <span class="crop-modal-close">&times;</span>
                            </div>
                            <div class="crop-modal-body">
                                <div class="crop-container">
                                    <img id="cropImage" src="" alt="Image to crop">
                                </div>
                            </div>
                            <div class="crop-modal-footer">
                                <button type="button" id="applyCrop" class="crop-apply-button">Apply Crop</button>
                                <button id="cancelCrop" class="crop-cancel-button">Cancel</button>
                            </div>
                        </div>
                    </div>
                    
                    <div class="button-group">
                        <button type="button" class="back-button" onclick="window.location.href='/admin/brands'">
                            Cancel
                        </button>
                        <button  class="submit-button" id="saveButton">
                            Save Brand
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <script>
          // Function to set active menu item
          function setActiveMenuItem() {
            const menuButtons = document.querySelectorAll('.sidebar .nav-button');
            
            menuButtons.forEach(button => {
                button.classList.remove('active');
                
                const buttonText = button.textContent.trim().toLowerCase();
                
              
                const routes = {
                    "dashboard": "/admin/dashboard",
                    "products": "/admin/products",
                    "users": "/admin/users",
                    "brands": "/admin/brands",
                    "category": "/admin/category",
                    "orders": "/admin/orders",
                    "coupons": "/admin/coupons",
                    "wallet": "/admin/wallet",
                   
                };
                
              
                if (buttonText === "brands") {
                    button.classList.add('active');
                }
                
               
                button.addEventListener('click', () => {
                    const route = routes[buttonText];
                    if (route) {
                        window.location.href = route;
                    }
                });
            });
        }
  
       
        document.addEventListener('DOMContentLoaded', setActiveMenuItem);

// =======================================validation============================================

        // Image handling variables
let cropper = null;
let currentImageInput = null;
let croppedImage = null;

document.addEventListener('DOMContentLoaded', function() {
    initImageHandling();
});

function initImageHandling() {
    const imageInput = document.getElementById('brandImage');
    const previewArea = document.getElementById('previewArea1');
    const cropButton = document.getElementById('cropButton1');
    const removeButton = document.getElementById('removeButton1');
    
    // Image selection handler
    imageInput.addEventListener('change', function(e) {
        if (this.files && this.files[0]) {
            const file = this.files[0];
            
            // Validate file type
            const validImageTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
            if (!validImageTypes.includes(file.type)) {
                Swal.fire({
                    title: 'Invalid image type',
                    text: 'Please select a valid image file (JPEG, PNG, GIF, WEBP)',
                    icon: 'error',
                    confirmButtonColor: '#d33'
                });
                this.value = '';
                return;
            }
            
            // Display preview
            const reader = new FileReader();
            reader.onload = function(event) {
                previewArea.innerHTML = `<img src="${event.target.result}" class="preview-image" alt="Preview">`;
                cropButton.disabled = false;
                removeButton.disabled = false;
            };
            reader.readAsDataURL(file);
        }
    });
    
    // Crop button handler
    cropButton.addEventListener('click', function() {
        const previewImage = previewArea.querySelector('img');
        if (previewImage) {
            openCropModal(previewImage.src);
        }
    });
    
    // Remove button handler
    removeButton.addEventListener('click', function() {
        previewArea.innerHTML = '<p class="no-image-text">No image selected</p>';
        imageInput.value = '';
        cropButton.disabled = true;
        removeButton.disabled = true;
        croppedImage = null;
    });
    
    // Crop modal handlers
    document.querySelector('.crop-modal-close').addEventListener('click', closeCropModal);
    document.getElementById('cancelCrop').addEventListener('click', closeCropModal);
    document.getElementById('applyCrop').addEventListener('click', applyCrop);
}

function openCropModal(imageSrc) {
    const cropModal = document.getElementById('cropModal');
    const cropImage = document.getElementById('cropImage');
    
    // Set image in the crop modal
    cropImage.src = imageSrc;
    
    // Show modal
    cropModal.style.display = 'flex';
    
    // Initialize cropper after a short delay to ensure the image is loaded
    setTimeout(() => {
        if (cropper) {
            cropper.destroy();
        }
        
        cropper = new Cropper(cropImage, {
            aspectRatio: 1, // 1:1 square crop
            viewMode: 1,
            responsive: true,
            restore: false,
            autoCropArea: 0.8,
            movable: false,
            zoomable: true,
            rotatable: true,
            scalable: false
        });
    }, 100);
}

function closeCropModal() {
    const cropModal = document.getElementById('cropModal');
    
    if (cropper) {
        cropper.destroy();
        cropper = null;
    }
    
    cropModal.style.display = 'none';
}

function applyCrop() {
    if (!cropper) return;
    
    // Get cropped canvas data
    const canvas = cropper.getCroppedCanvas({
        width: 500,   // Set the max width to maintain consistency
        height: 500,  // Set the max height to maintain consistency
        imageSmoothingEnabled: true,
        imageSmoothingQuality: 'high'
    });
    
    if (!canvas) {
        closeCropModal();
        return;
    }
    
    // Update the preview with the cropped image
    const previewArea = document.getElementById('previewArea1');
    const croppedImageUrl = canvas.toDataURL('image/jpeg', 0.9);
    previewArea.innerHTML = `<img src="${croppedImageUrl}" class="preview-image" alt="Preview">`;
    
    // Convert canvas to blob for upload
    canvas.toBlob(function(blob) {
        croppedImage = blob;
    }, 'image/jpeg', 0.9);
    
    // Close the modal
    closeCropModal();
}

// Cloudinary upload function
const uploadImageToCloudinary = async (file) => {
    const formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', 'ecommerce-uploads'); // Use appropriate upload preset
    formData.append('public_id', `brand_image_${Date.now()}`);
    formData.append('folder','brands',); // this is where it sets the name of the folder.

    const cloudinaryUploadUrl = 'https://api.cloudinary.com/v1_1/dq1tnbaxt/image/upload';
    
    try {
        const response = await fetch(cloudinaryUploadUrl, {
            method: 'POST',
            body: formData,
        });
        const result = await response.json();
        
        if (result.secure_url) {
            return result.secure_url;
        } else {
            throw new Error('Image upload failed');
        }
    } catch (error) {
        console.error('Image Upload Error:', error);
        return null;
    }
};

// Modify the save button event listener
document.getElementById('saveButton').addEventListener('click', async (event) => {
    event.preventDefault();

    const brandName = document.getElementById('brandName').value.trim();
    
    // Validate brand name
    if (!brandName) {
        return Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: "Brand name is required",
            background: '#1a1a1a',
            color: '#ffffff',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Got it'
        });
    }

    // Validate image
    const imageInput = document.getElementById('brandImage');
    if (!croppedImage && (!imageInput.files || imageInput.files.length === 0)) {
        return Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: "Brand image is required",
            background: '#1a1a1a',
            color: '#ffffff',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Got it'
        });
    }

    try {
        // Show loading indicator
        Swal.fire({
            title: 'Uploading...',
            text: 'Please wait',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        // Upload image to Cloudinary
        let imageUrl = null;
        if (croppedImage) {
            // Use cropped image if available
            imageUrl = await uploadImageToCloudinary(croppedImage);
        } else if (imageInput.files && imageInput.files.length > 0) {
            // Otherwise use original image
            imageUrl = await uploadImageToCloudinary(imageInput.files[0]);
        }

        // Check if image upload was successful
        if (!imageUrl) {
            throw new Error('Image upload failed');
        }

        // Prepare data for backend
        const data = {
            brandName: brandName,
            imageUrl: imageUrl
        };

        // Send data to backend
        const response = await fetch('/admin/brands/add-brands', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(data)
        });

        const result = await response.json();

        if (result.success) {
            Swal.fire({
                icon: 'success',
                title: 'Success',
                text: "Brand created successfully",
                background: '#1a1a1a',
                color: '#ffffff',
                confirmButtonColor: '#3085d6',
                confirmButtonText: 'Got it'
            }).then((result) => {
                if (result.isConfirmed) {
                    window.location.href = "/admin/brands"; 
                }
            });
        } else {
            throw new Error(result.message || 'Failed to create brand');
        }
    } catch (error) {
        console.error("Error:", error);
        Swal.fire({
            icon: 'error',
            title: 'Oops...',
            text: error.message || "Something went wrong",
            background: '#1a1a1a',
            color: '#ffffff',
            confirmButtonColor: '#3085d6',
            confirmButtonText: 'Got it'
        });
    }
});

    </script>
</body>
</html>