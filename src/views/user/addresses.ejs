<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Your Addresses</title>
  <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <style>
    body {
      font-family: Arial, sans-serif;
      line-height: 1.6;
      color: #333;
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }
    
    .breadcrumb {
      margin-bottom: 20px;
      color: #555;
    }
    
    .breadcrumb a {
      color: #e47911;
      text-decoration: none;
    }
    
    h1 {
      font-size: 24px;
      margin-bottom: 30px;
    }
    
    .address-container {
      display: flex;
      flex-wrap: wrap;
      gap: 20px;
      margin-bottom: 40px;
    }
    
    .address-card {
      border: 1px solid #ddd;
      border-radius: 4px;
      padding: 20px;
      width: 100%;
      max-width: 350px;
      box-shadow: 0 2px 5px rgba(0,0,0,0.05);
    }
    
    .add-address-card {
      border: 1px dashed #ccc;
      border-radius: 4px;
      padding: 20px;
      width: 100%;
      max-width: 350px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      height: 250px;
    }
    
    .add-address-card:hover {
      background-color: #f9f9f9;
    }
    
    .add-icon {
      font-size: 48px;
      color: #ccc;
      margin-bottom: 15px;
    }
    
    .default-label {
      font-size: 12px;
      color: #555;
      margin-bottom: 15px;
      display: flex;
      align-items: center;
    }
    
    .default-label img {
      height: 20px;
      margin-left: 5px;
    }
    
    .address-name {
      font-weight: bold;
      margin-bottom: 5px;
    }
    
    .address-details {
      margin-bottom: 15px;
    }
    
    .address-phone {
      margin-bottom: 10px;
    }
    
    .delivery-link {
      color: #0066c0;
      text-decoration: none;
      font-size: 14px;
    }
    
    .delivery-link:hover {
      text-decoration: underline;
    }
    
    .address-actions {
      margin-top: 20px;
      border-top: 1px solid #eee;
      padding-top: 15px;
    }
    
    .action-link {
      color: #0066c0;
      text-decoration: none;
      margin-right: 15px;
      font-size: 14px;
    }
    
    .action-link:hover {
      text-decoration: underline;
    }
    
    .separator {
      color: #ccc;
    }

    /* Form Styles */
    .address-form-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 90%;
      background-color: rgba(0, 0, 0, 0.5);
      display: none;
      justify-content: center;
      align-items: center;
      z-index: 1000;
      overflow-y: auto;
      padding: 40px 0;
    }
    
    .address-form {
      background-color: white;
      padding: 30px;
      border-radius: 8px;
      width: 100%;
      max-width: 500px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      position: relative;
      margin: auto;
    }
    
    .form-title {
      font-size: 20px;
      margin-bottom: 25px;
      font-weight: bold;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    .form-group label {
      display: block;
      margin-bottom: 6px;
      font-weight: 500;
    }
    
    .form-group input, 
    .form-group select {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 4px;
      font-size: 16px;
      box-sizing: border-box;
    }
    
    .form-group input:focus,
    .form-group select:focus {
      border-color: #e47911;
      outline: none;
      box-shadow: 0 0 0 2px rgba(228, 121, 17, 0.2);
    }
    
    .form-row {
      display: flex;
      gap: 15px;
      margin-bottom: 20px;
    }
    
    .form-col {
      flex: 1;
    }
    
    .form-buttons {
      display: flex;
      justify-content: space-between;
      margin-top: 30px;
    }
    
    .form-buttons button {
      padding: 12px 20px;
      border-radius: 4px;
      font-size: 16px;
      cursor: pointer;
    }
    
    .cancel-btn {
      background-color: #f1f1f1;
      border: 1px solid #ccc;
      color: #333;
    }
    
    .save-btn {
      background-color: #febd69;
      border: 1px solid #f0ad4e;
      color: #111;
      font-weight: bold;
    }
    
    .save-btn:hover {
      background-color: #f5a623;
    }
    
    .checkbox-group {
      margin-top: 20px;
    }
    
    .checkbox-group input {
      margin-right: 10px;
      width: auto;
    }.error-message {
    color: red;
    font-size: 14px;
    margin-top: 5px;
    display: block;
}

  </style>
</head>
<body>
  <div class="breadcrumb">
    <a href="/swizz-times">Home</a> â€º Your Addresses
  </div>
  
  <button class="btn btn-outline-secondary mb-3" onclick="window.history.back()">
    <i class="fa fa-arrow-left"></i> Go Back
</button>
  <h1>Your Addresses</h1>
  
  <div class="address-container">
    <div class="add-address-card" id="add-address-btn">
      <div class="add-icon">+</div>
      <div>Add address</div>
    </div>
    
    <% if (addresses.length > 0) { %>
        <% addresses.forEach(function(address) { %>
            <div class="address-card">
                <div class="address-name"><%= address.fullName %></div>
                <div class="address-details"><%= address.houseNumber %>, <%= address.city %></div>
                <div class="address-details"><%= address.state %> <%= address.zipCode %></div>
                <div class="address-details"><%= address.country %></div>
                <div class="address-phone">Phone number: <%= address.phone %></div>
    
                <!-- Address Type Display -->
                <div class="address-type">Type: <%= address.addressType %></div>
    
                <% if (address.isDefault) { %>
                    <span class="default-badge">Default Address</span>
                <% } %>
    
                <div class="address-actions">
                    <a href="#" class="action-link" onclick="editAddress('<%= address._id %>')">Edit</a>
                    <span class="separator">|</span>
                    <a href="#" class="action-link" onclick="removeAddress('<%= address._id %>')">Remove</a>
                    <span class="separator">|</span>
                    <% if (!address.isDefault) { %>
                        <a href="#" class="action-link" onclick="setDefaultAddress('<%= address._id %>')">Set as Default</a>
                    <% } %>
                </div>
            </div>
        <% }) %>
    <% } else { %>
        <p>No addresses found.</p>
    <% } %>
    
    
  <!-- Address Form Overlay -->

  <div class="address-form-overlay" id="address-form-overlay">
    <div class="address-form">
      <div class="form-title">Add a new address</div>
      
      <div class="form-group">
        <label for="full-name">Full Name</label>
        <input type="text" id="full-name" name="full-name">
        <span class="error-message" id="full-name-error"></span>
      </div>
      
      <div class="form-group">
        <label for="phone">Phone Number</label>
        <input type="tel" id="phone" name="phone">
        <span class="error-message" id="phone-error"></span>
      </div>
      
      <div class="form-group">
        <label for="houseNumber">House Number / Building</label>
        <input type="text" id="houseNumber" name="houseNumber" placeholder="House number, building number, landmark">
        <span class="error-message" id="houseNumber-error"></span>
      </div>
      
      <div class="form-row">
        <div class="form-col">
          <label for="city">City</label>
          <input type="text" id="city" name="city">
          <span class="error-message" id="city-error"></span>
        </div>
        
        <div class="form-col">
          <label for="state">State</label>
          <input type="text" id="state" name="state">
          <span class="error-message" id="state-error"></span>
        </div>
      </div>

      <div class="form-row">
        <div class="form-col">
          <label for="district">District</label>
          <input type="text" id="district" name="district">
          <span class="error-message" id="district-error"></span>
        </div>
        
        <div class="form-col">
          <label for="zip">ZIP</label>
          <input type="text" id="zip" name="zip">
          <span class="error-message" id="zip-error"></span>
        </div>
      </div>

      <div class="form-row">
        <div class="form-col">
            <label for="country">Country</label>
            <select id="country" name="country">
              <option value="">Select a country</option>
              <option value="UNITED STATES">United States</option>
              <option value="CANADA">Canada</option>
              <option value="UNITED KINGDOM">United Kingdom</option>
              <option value="INDIA">India</option>
              <option value="AUSTRALIA">Australia</option>
            </select>
            <span class="error-message" id="country-error"></span>
        </div>
      </div>

      <div class="form-col">
        <label for="addressType">Address Type</label>
        <select id="addressType" name="addressType">
          <option value="">Select the address type</option>
          <option value="Home">Home</option>
          <option value="Work">Work</option>
          <option value="Other">Other</option>
        </select>
        <span class="error-message" id="addressType-error"></span>
      </div>

      <div class="checkbox-group">
        <input type="checkbox" id="default-address" name="default-address">
        <label for="default-address">Make this my default address</label>
      </div>
      
      <div class="form-buttons">
        <button class="cancel-btn" id="cancel-address-btn">Cancel</button>
        <button class="save-btn" id="save-address-btn">Save Address</button>
      </div>
    </div>
</div>
  

  <script>
    
    document.getElementById('add-address-btn').addEventListener('click', function() {
      document.getElementById('address-form-overlay').style.display = 'flex';
      document.body.style.overflow = 'hidden';
    });
    
  
    document.getElementById('cancel-address-btn').addEventListener('click', function() {
      document.getElementById('address-form-overlay').style.display = 'none';
      document.body.style.overflow = 'auto';
    });
    
  


    document.getElementById('save-address-btn').addEventListener('click', function(event) {
        event.preventDefault()
        document.querySelectorAll(".error-message").forEach(el => el.innerText = "");

    const addressData = {
        fullName: document.getElementById("full-name").value.trim(),
        phone: document.getElementById("phone").value.trim(),
        houseNumber: document.getElementById("houseNumber").value.trim(),
        city: document.getElementById("city").value.trim(),
        state: document.getElementById("state").value.trim(),
        district: document.getElementById("district").value.trim(),
        zipCode: document.getElementById("zip").value.trim(),
        country: document.getElementById("country").value.trim(),
        addressType: document.getElementById("addressType").value.trim(),
        isDefault: document.getElementById("default-address").checked
    };

    
    let isValid = true;

    if (!addressData.fullName) {
        document.getElementById("full-name-error").innerText = "Full name is required";
        isValid = false;
    }

    if (!addressData.phone.match(/^\d{10,15}$/)) {
        document.getElementById("phone-error").innerText = "Enter a valid phone number (10-15 digits)";
        isValid = false;
    }

    if (!addressData.houseNumber) {
        document.getElementById("houseNumber-error").innerText = "House number is required";
        isValid = false;
    }

    if (!addressData.city) {
        document.getElementById("city-error").innerText = "City is required";
        isValid = false;
    }

    if (!addressData.state) {
        document.getElementById("state-error").innerText = "State is required";
        isValid = false;
    }

    if (!addressData.district) {
        document.getElementById("district-error").innerText = "District is required";
        isValid = false;
    }

    if (!addressData.zipCode.match(/^\d{4,10}$/)) {
        document.getElementById("zip-error").innerText = "Enter a valid ZIP code";
        isValid = false;
    }

    if (!addressData.country) {
        document.getElementById("country-error").innerText = "Country is required";
        isValid = false;
    }

   
    if (!isValid) return;

    fetch('/swizz-times/user-addresses',{
        method: "POST",
            headers: {"Content-Type": "application/json",},
            body: JSON.stringify(addressData)
    })
    .then(res=>res.json())
    .then(data => {
            if (data.success) {Swal.fire("Success", "Address saved successfully!", "success");}
                else {Swal.fire("Error", data.message || "Something went wrong", "error");}
            }).then((result) => {
                window.location.reload();
                if (result) {
                            // window.location.href = "/swizz-times/user-addresses"; 
                        }
                    })
        .catch(error => {
            console.error("Error:", error);
            Swal.fire("Error", "Failed to save address", "error");
        });

      document.getElementById('address-form-overlay').style.display = 'none';
      document.body.style.overflow = 'auto'; 
    });
    
    
    document.getElementById('address-form-overlay').addEventListener('click', function(e) {
      if (e.target === this) {
        this.style.display = 'none';
        document.body.style.overflow = 'auto'; 
      }
    });

    async function removeAddress(addressId) {
    try {
       
        const confirmation = await Swal.fire({
            title: "Are you sure?",
            text: "You won't be able to recover this address!",
            icon: "warning",
            showCancelButton: true,
            confirmButtonText: "Yes, delete it!",
            cancelButtonText: "Cancel"
        });

        if (!confirmation.isConfirmed) return;

       
        const response = await fetch(`/swizz-times/user-addresses/${addressId}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" }
        });

        const data = await response.json();

      
        if (data.success) {
            await Swal.fire("Deleted!", "Address deleted successfully!", "success");
        } else {
            await Swal.fire("Error", data.message || "Something went wrong", "error");
        }

    } catch (error) {
        console.error("Error deleting address:", error);
        await Swal.fire("Error", "Failed to delete address. Please try again.", "error");
    }
}


async function setDefaultAddress(addressId) {
    try {
        console.log(addressId)
        const response = await fetch(`/swizz-times/user-addresses/default/${addressId}`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" }
        });

        const data = await response.json();

        if (data.success) {
            Swal.fire("Success", "Default address updated!", "success");
            window.location.reload();
        } else {
            Swal.fire("Error", data.message || "Something went wrong", "error");
        }
    } catch (error) {
        console.error("Error setting default address:", error);
        Swal.fire("Error", "Failed to update default address", "error");
    }
}

async function editAddress(addressId) {
    try {
       
        const response = await fetch(`/swizz-times/checkout/user-addresses/${addressId}`);
        const address = await response.json();

        if (!address.success) {
            return Swal.fire("Error", "Address not found", "error");
        }

       
        const { value: formValues } = await Swal.fire({
            title: "Edit Address",
            html: `
                <input id="fullName" class="swal2-input" placeholder="Full Name" value="${address.data.fullName}">
                <input id="phone" class="swal2-input" placeholder="Phone" value="${address.data.phone}">
                <input id="houseNumber" class="swal2-input" placeholder="House Number" value="${address.data.houseNumber}">
                <input id="city" class="swal2-input" placeholder="City" value="${address.data.city}">
                <input id="district" class="swal2-input" placeholder="District" value="${address.data.district}">
                <input id="state" class="swal2-input" placeholder="State" value="${address.data.state}">
                <input id="zipCode" class="swal2-input" placeholder="ZIP Code" value="${address.data.zipCode}">
                <input id="country" class="swal2-input" placeholder="Country" value="${address.data.country}">
                <select id="addressType" class="swal2-select">
                    <option value="Home" ${address.data.addressType === "Home" ? "selected" : ""}>Home</option>
                    <option value="Work" ${address.data.addressType === "Work" ? "selected" : ""}>Work</option>
                    <option value="Other" ${address.data.addressType === "Other" ? "selected" : ""}>Other</option>
                </select>
            `,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: "Save Changes",
            preConfirm: () => {
                return {
                    fullName: document.getElementById("fullName").value.trim(),
                    phone: document.getElementById("phone").value.trim(),
                    houseNumber: document.getElementById("houseNumber").value.trim(),
                    city: document.getElementById("city").value.trim(),
                    district: document.getElementById("district").value.trim(),
                    state: document.getElementById("state").value.trim(),
                    zipCode: document.getElementById("zipCode").value.trim(),
                    country: document.getElementById("country").value.trim(),
                    addressType: document.getElementById("addressType").value
                };
            }
        });

        if (!formValues) return;
        console.log(formValues)

       
        const updateResponse = await fetch(`/swizz-times/user-addresses/edit/${addressId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(formValues)
        });

        const updateResult = await updateResponse.json();

        if (updateResult.success) {
            Swal.fire("Success", "Address updated successfully!", "success").then(() => {
                location.reload(); 
            });
        } else {
            Swal.fire("Error", updateResult.message || "Failed to update address", "error");
        }
    } catch (error) {
        console.error("Error editing address:", error);
        Swal.fire("Error", "Something went wrong!", "error");
    }
}



  </script>
</body>
</html>