<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Order Details</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>

        :root {
            --primary-color: #4a90e2;
            --secondary-color: #2ecc71;
            --accent-color: #34495e;
            --background-color: #f4f7f6;
            --card-background: #ffffff;
            --text-color: #2c3e50;
            --muted-text: #7f8c8d;
        }

        body {
            background-color: var(--background-color);
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;
            color: var(--text-color);
            line-height: 1.6;
        }

        .order-container {
            max-width: 1100px;
            margin: 40px auto;
            padding: 0 15px;
        }

        .order-header {
            background-color: var(--card-background);
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
            border-left: 5px solid var(--primary-color);
        }

        .order-tracking {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
            position: relative;
        }

        .tracking-step {
            display: flex;
            flex-direction: column;
            align-items: center;
            flex: 1;
            position: relative;
        }

        .tracking-step::before {
            content: '';
            position: absolute;
            top: 20px;
            left: -50%;
            width: 100%;
            height: 3px;
            background-color: #e0e0e0;
            z-index: 1;
        }

        .tracking-step:first-child::before {
            display: none;
        }

        .tracking-icon {
            width: 50px;
            height: 50px;
            border-radius: 50%;
            background-color: #e0e0e0;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-bottom: 10px;
            position: relative;
            z-index: 2;
            transition: all 0.3s ease;
        }

        .tracking-step.active .tracking-icon {
            background-color: var(--secondary-color);
            color: white;
            transform: scale(1.1);
            box-shadow: 0 5px 15px rgba(46, 204, 113, 0.4);
        }

        .tracking-label {
            color: var(--muted-text);
            font-weight: 500;
            margin-top: 10px;
            text-align: center;
        }

        .tracking-step.active .tracking-label {
            color: var(--secondary-color);
            font-weight: 600;
        }

        .order-details {
            background-color: var(--card-background);
            border-radius: 12px;
            padding: 25px;
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.05);
        }

        .product-item {
            display: flex;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #f1f3f4;
        }

        .product-image {
            width: 90px;
            height: 90px;
            object-fit: cover;
            border-radius: 10px;
            margin-right: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .order-summary {
            background-color: #f9fbfc;
            border-radius: 12px;
            padding: 25px;
            margin-top: 20px;
        }

        .summary-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            color: var(--text-color);
        }

        .summary-total {
            font-weight: 700;
            color: var(--primary-color);
            font-size: 1.2em;
        }

        .shipping-details {
            background-color: #f0f4f8;
            border-radius: 12px;
            padding: 20px;
            margin-top: 20px;
        }

        .btn-custom {
            background-color: var(--primary-color);
            color: white;
            border: none;
            padding: 12px 25px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-custom:hover {
            background-color: #3a7bd5;
            transform: translateY(-3px);
            box-shadow: 0 5px 15px rgba(58, 123, 213, 0.3);
        }

        .btn-outline-custom {
            border-color: var(--muted-text);
            color: var(--muted-text);
            padding: 12px 25px;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .btn-outline-custom:hover {
            background-color: var(--muted-text);
            color: white;
        }

        .btn-retry-payment {
            background-color: #e67e22;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 8px;
            transition: all 0.3s ease;
            margin-top: 10px;
        }

        .btn-retry-payment:hover {
            background-color: #d35400;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(230, 126, 34, 0.3);
        }
    </style>
</head>
<body>
    <div class="order-container">
        <button class="btn btn-outline-secondary mb-3" onclick="window.history.back()">
            <i class="fa fa-arrow-left"></i> Go Back
        </button>
        <div class="order-header">
            <div class="row align-items-center">
                <div class="col-md-6">
                    <h2 class="mb-3"><%= order.orderId %></h2>
                    <p class="text-muted">Placed on <%= order.createdAt.toDateString() %></p>
                </div>
                <div class="col-md-6 text-md-end">
                    <span class="badge bg-success p-2">Order <%= order.orderStatus ? order.orderStatus : 'Unknown' %></span>
                    <p class="mt-2 text-muted">Estimated Delivery: <%= order.deliveryDate ? new Date(order.deliveryDate).toDateString() : 'Not available' %></p>
                    <% if (order.orderStatus === 'Payment Pending') { %>
                        <button class="btn-retry-payment" onclick="retryPayment('<%= order.orderId %>')">
                            <i class="fas fa-redo-alt me-2"></i>Retry Payment
                        </button>
                    <% } %>
                </div>
            </div>

            <div class="order-tracking">
                <% 
                const statuses = ['Processing', 'Shipped', 'Delivered'];
                statuses.forEach((status, index) => { 
                %>
                    <div class="tracking-step <%= order.orderStatus === status || 
                        (index < statuses.indexOf(order.orderStatus)) ? 'active' : '' %>">
                        <div class="tracking-icon">
                            <i class="fas <%= 
                                status === 'Processing' ? 'fa-box' : 
                                status === 'Shipped' ? 'fa-truck' : 
                                'fa-check-circle' 
                            %>"></i>
                        </div>
                        <div class="tracking-label"><%= status %></div>
                    </div>
                <% }); %>
            </div>
        </div>

        <div class="row">
            <div class="col-md-8">
                <div class="order-details">
                    <h4 class="mb-4">Order Items (<%= order.items.length %>)</h4>
                    <% order.items.forEach(item => { %>
                        <div class="product-item">
                            <img src="<%= item.product.productImage[0] %>" alt="<%= item.product.productName %>" class="product-image">
                            <div class="flex-grow-1">
                                <h5><%= item.product.productName %></h5>
                                <p class="text-muted">Quantity: <%= item.quantity %></p>
                            </div>
                            <div>
                                <p class="text-end fw-bold">₹<%= (item.price * item.quantity).toFixed(2) %></p>
                            </div>
                        </div>
                    <% }); %>

                    <div class="shipping-details mt-4">
                        <h4 class="mb-3">Shipping Address</h4>
                        <p>
                            <%= order.address.fullName %><br>
                            <%= order.address.houseNumber %>, <%= order.address.city %><br>
                            <%= order.address.state %> - <%= order.address.zipCode %><br>
                            <%= order.address.country %><br>
                            Phone: <%= order.address.phone %>
                        </p>
                    </div>
                </div>
            </div>

            <div class="col-md-4">
                <div class="order-summary">
                    <h4 class="mb-4">Order Summary</h4>
                    <div class="summary-row">
                        <span>Subtotal (<%= order.items.length %> items)</span>
                        <span>₹<%= order.subtotal.toFixed(2) %></span>
                    </div>
                    <div class="summary-row">
                        <span>Shipping</span>
                        <span>₹<%= order.shippingCharge.toFixed(2) %></span>
                    </div>
                    <div class="summary-row text-success">
                        <span>Discount</span>
                        <span>- ₹<%= order.discount.toFixed(2) %></span>
                    </div>
                    <div class="summary-row text-success">
                        <span>Coupon Discount</span>
                        <span>- ₹<%= order.couponDiscount.toFixed(2) %></span>
                    </div>
                    <hr>
                    <div class="summary-row summary-total">
                        <span>Total</span>
                        <span>₹<%= order.totalAmount.toFixed(2) %></span>
                    </div>
                </div>

                <div class="payment-details mt-4 bg-light p-3 rounded">
                    <h4 class="mb-3">Payment Method</h4>
                    <p><%= order.paymentMethod === "cash" ? "Cash on Delivery" : order.paymentMethod %></p>
                </div>

                <div class="d-grid gap-2 mt-3">
                    <a href="/shop" class="btn btn-primary">Continue Shopping</a>

                    <% if (order.orderStatus !== 'Payment Pending') { %>
                        <button class="btn btn-outline-custom" onclick="downloadInvoice('<%= order.orderId %>')">
                            <i class="fas fa-download me-2"></i>Download Invoice
                        </button>
                    <% } %>
                </div>

            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>
    <script>
        async function downloadInvoice(orderId) {
            try {
                console.log(1)
                const response = await fetch(`/order-details/download-invoice/${orderId}`);
                const blob = await response.blob();
                const url = window.URL.createObjectURL(blob);
                
                const a = document.createElement("a");
                a.href = url;
                a.download = `Invoice-${orderId}.pdf`;
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            } catch (error) {
                console.error("Error downloading invoice:", error);
                alert("Failed to download invoice.");
            }
        }

            async function retryPayment(orderId) {
            try {
                console.log(orderId)
                const response = await fetch(`/retry-payment/${orderId}`, {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                });
                const data = await response.json()
                
                if (!data.success) {
                    return Swal.fire("Error", data.message, "error");
                }
                // const addressId = data1.addressId
                const {addressId, paymentMethod, subtotal, discount, couponDiscount, shippingCharge, finalTotal, amount, razorpayOrderId} = data
                console.log(data)
            

                            const options = {
                key: "rzp_test_WUj2RKBZ3Xciuu",
                amount,
                currency: "INR",
                name: "Swizz Times",
                description: "Payment for your order",
                order_id: razorpayOrderId,
                orderId: orderId,

                handler: async function (response) {
                    const paymentData = {
                        ...response,
                        orderId,
                        orderDetails: {
                            addressId,
                            subtotal,
                            discount,
                            couponDiscount,
                            shippingCharge,
                            finalTotal
                        }
                    };

    const verifyResponse = await fetch("/retry-verify-payment", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({...paymentData})
    });

    const verifyData = await verifyResponse.json();
    if (verifyData.success) {
        window.location.href = `/order-success/${verifyData.orderId}`;
    } else {
        Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                text: verifyData.message
                            });
    }
},
theme: { color: "#528FF0" }
                };

                const rzp1 = new Razorpay(options);
                rzp1.open();
                rzp1.on('payment.failed', async (response) => {
                    // console.log(1)
                        const failureResponse = await fetch(`/handle-payment-failure`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({
                                orderId: data.orderId,
                                failureReason: response.error.description
                            })
                        });
                        const failureData = await failureResponse.json();
                        if (failureData.success) {
                            window.location.href = `/transaction-failure?orderId=${failureData.orderId}`;
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Payment Failed',
                                text: 'Failed to process payment failure. Please try again.'
                            });
                        }
                    });

              
            } catch (error) {
                console.error("Error retrying payment:", error);
                alert("Failed to retry payment.");
            }
        }
    </script>
</body>
</html>